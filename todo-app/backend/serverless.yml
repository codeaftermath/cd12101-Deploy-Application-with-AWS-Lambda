# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: codeaftermath
service: serverless-todo-app

plugins:
  - serverless-iam-roles-per-function

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs20.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    AUTH0_URL_SSM_PATH: /udacity-todo-app/${self:provider.stage}/auth0ServiceUrl

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
        - ssm:GetParameter
        - ssm:GetParameters
        - ssm:GetParametersByPath
        Resource: arn:aws:ssm:${self:provider.region}:*:parameter${self:provider.environment.AUTH0_URL_SSM_PATH}

  # TODO: Configure this function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          request:
            schemas:
              application/json: ${file(src/model/todo-create-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}


  # TODO: Configure this function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          request:
            schemas:
              application/json: ${file(src/model/todo-update-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
    iamRoleStatements:
      - Effect: Allow
        Action:
        - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment

resources:
  Resources:
    todosDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        TableName: ${self:provider.environment.TODOS_TABLE}
        BillingMode: PAY_PER_REQUEST
